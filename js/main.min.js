(function () {
    var blog = angular.module("blog", []);
    blog.directive("blogDirective", function() {
        return {
            templateUrl : 'apps/blog/html/blog.html',
            scope: {}
        };
    });
    
    blog.controller('blogController', function($scope, $http, BlogFactory, $window) {
        vm = this;
        $scope.articles;
        
        BlogFactory.get().success(function (msg) {
            $scope.articles = msg.Articles;
        });
    });
    
    blog.factory('BlogFactory', function ($http) {
        return {
            get: function () {
                return $http.get('/apps/blog/data/blogdata.json');
            }
        };
    });

    angular.bootstrap(document.getElementById("blog"), ['blog']);
})();



(function () {
    var header = angular.module('header', []);
    
    header.directive('headerDirective', function() {
        return {
            template: '/Directory/Global/header.html',
            scope: {}
        };
    });
    
    header.controller('headerController', function($scope) {
        vm = this;
    });
    
    angular.bootstrap(document.getElementById('header'), ['header']);
})();
(function () {
    var footer = angular.module('footer', []);
    
    footer.directive('footerDirective', function() {
        return {
            templateUrl : '/Directory/Global/footer.html',
            scope: {}
        };
    });
    
    footer.controller('footerController', function($scope) {
        vm = this;
    });
    
    angular.bootstrap(document.getElementById("footer"), ['footer']);
})();



function Survive() {
class Player {

    constructor(playerName) {
        this.playerHealth   = 10;
        this.playerLevel    = 1;
        this.playerLuck     = 10;
        this.playerName     = playerName;
        this.playerStamina  = 10;
        this.playerStrength = 10;
    }

    attack() {
        let damageDone = this.playerStrength / 2;

        return damageDone; 
    }

    gainHealth(amountGained) {
        this.playerHealth += amountGained;
    }

    gainLevel(levelGained) {
        this.playerLevel += levelGained;
    }

    levelup(playerHealth, playerLevel, playerLuck,
        playerStamina, playerStrength) {
        this.playerHealth   += playerHealth;
        this.playerLevel    += playerLevel;
        this.playerLuck     += playerLuck;
        this.playerStamina  += playerStamina;
        this.playerStrength += playerStrength;
    }

    reduceHealth(amountReduced) {
        this.playerHealth -= amountReduced;
    }

    reduceLevel(levelReduced) {
        this.playerLevel -= levelReduced
    }
}
    function Enemy(enemyHealth, enemyLevel, enemyName, enemyStamina, enemyStrength) {
        this.enemyHealth = enemyHealth;
        this.enemyLevel = enemyLevel;
        this.enemyName = enemyName;
        this.enemyStamina = enemyStamina;
        this.enemyStrength = enemyStrength;

        this.setEnemyHealth = function(newHealth) {
            this.enemyHealth = newHealth;
        }

        this.setEnemyLevel = function(newLevel) {
            this.enemyLevel = newLevel;
        }

        this.setEnemyName = function(newName) {
            this.enemyName = newName;
        }

        this.setEnemyStamina = function(newStamina) {
            this.enemyStamina = newStamina;
        }
    }
}